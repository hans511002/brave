import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'com.android.application'

android {
    compileSdkVersion PROP_COMPILE_SDK_VERSION.toInteger()
    buildToolsVersion '28.0.2'
    defaultConfig {
        applicationId 'org.cocos2dx.braveApp'
        minSdkVersion PROP_MIN_SDK_VERSION.toInteger()
        targetSdkVersion PROP_TARGET_SDK_VERSION.toInteger()
        versionCode 1
        versionName "1.0"

        externalNativeBuild {
            ndkBuild {
                if (!project.hasProperty("PROP_NDK_MODE") || PROP_NDK_MODE.compareTo('none') != 0) {
                    // skip the NDK Build step if PROP_NDK_MODE is none
                    targets 'brave'
                    arguments 'NDK_TOOLCHAIN_VERSION=4.9'
                    arguments 'APP_PLATFORM=android-' + PROP_APP_PLATFORM.toInteger()

                    def module_paths = [project.file("../../cocos2d").absolutePath,
                                        project.file("../../cocos2d/cocos").absolutePath,
                                        project.file("../../cocos2d/external").absolutePath]
                    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                        // should use '/'
                        module_paths = module_paths.collect { it.replaceAll('\\\\', '/') }
                        arguments 'NDK_MODULE_PATH=' + module_paths.join(";")
                    } else {
                        arguments 'NDK_MODULE_PATH=' + module_paths.join(':')
                    }

                    arguments '-j' + Runtime.runtime.availableProcessors()
                    abiFilters.addAll(PROP_APP_ABI.split(':').collect { it as String })
                }
            }
        }
    }
    sourceSets.main {
        java.srcDir "src"
        res.srcDir "res"
        manifest.srcFile "AndroidManifest.xml"
        assets.srcDir "../../Resources/res"
        assets.exclude "**/*.zip"
    }
    externalNativeBuild {
        ndkBuild {
            if (!project.hasProperty("PROP_NDK_MODE") || PROP_NDK_MODE.compareTo('none') != 0) {
                // skip the NDK Build step if PROP_NDK_MODE is none
                path "jni/Android.mk"
            }
        }
    }
    signingConfigs {
        release {
            if (project.hasProperty("RELEASE_STORE_FILE")) {
                storeFile file(RELEASE_STORE_FILE)
                storePassword RELEASE_STORE_PASSWORD
                keyAlias RELEASE_KEY_ALIAS
                keyPassword RELEASE_KEY_PASSWORD
                v2SigningEnabled false
            }
        }
        debug {
            if (project.hasProperty("RELEASE_STORE_FILE")) {
                storeFile file(RELEASE_STORE_FILE)
                storePassword RELEASE_STORE_PASSWORD
                keyAlias RELEASE_KEY_ALIAS
                keyPassword RELEASE_KEY_PASSWORD
                v2SigningEnabled false
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            if (project.hasProperty("RELEASE_STORE_FILE")) {
                signingConfig signingConfigs.release
            }
            externalNativeBuild {
                ndkBuild {
                    arguments 'NDK_DEBUG=0'
                }
            }
        }

        debug {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (project.hasProperty("RELEASE_STORE_FILE")) {
                signingConfig signingConfigs.debug
            }
            externalNativeBuild {
                ndkBuild {
                    arguments 'NDK_DEBUG=1'
                }
            }
        }
    }
    lintOptions {
        abortOnError false
        disable 'TypographyFractions', 'TypographyQuotes'
    }
    productFlavors {

    }

}

android.applicationVariants.all { variant ->
    // delete previous files first
    delete "${buildDir}/intermediates/assets/${variant.dirName}"
    copy {
        from "${buildDir}/../../../Resources/res"
        into "${buildDir}/intermediates/assets/${variant.dirName}"
        exclude "**/*.gz"
        exclude "${buildDir}/../../../Resources/res/**/**/*.zip","${buildDir}/../../../Resources/res/**/**/library/**"
        //excludes.add("**/*.zip")
        //delete ("${buildDir}/../../Resources/res\\cast\\Air_mc\\Air_mc.zip")
        exclude{
            File f = it.file
            //println f.absolutePath
            f.absolutePath.endsWith(".zip") || f.absolutePath.indexOf("library")>0
        }
    }

    variant.mergeAssets.doLast {
        copy {
            from "${buildDir}/intermediates/assets/${variant.dirName}"
            into "${buildDir}/tmp/assets/${variant.dirName}"
            exclude{
                File f = it.file
                //println f.absolutePath
                if(f.absolutePath.endsWith(".zip") || f.absolutePath.indexOf("library")>0 ||f.absolutePath.endsWith(".dbproj")){
                    delete f.absolutePath
                }
            }
        }
    }


}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile project(':libcocos2dx')

}
